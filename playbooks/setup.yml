---
- hosts: host
  remote_user: root
  gather_facts: no       # For now do not gather facts, but would like to gather
                         # facts and use the disks from gathered facts

  # This will be one-to-one mapping. Every listed disk will have a pv,
  # corresponding vg, and corresponding lv.

  tasks:
  # Create pv on all the disks
  - name: Create Physical Volume on all the nodes
    pv: action=create disks="{{ bricks }}" options="--dataalignment 1280k"

  # Create vg on the disks
  #  - name: Create volume group on the disks
  ##vg: action=create device={{ item }} options="--physicalextent-size 128k"
  #    namepattern="RHS_vg"
  #with_items: bricks

  # Create lv on the disk
  #- name: Create logical volumes on the given vg
  #  lv: action=create device={{ time }}
  #  with_items: bricks

  # - name: Create a VG with the given disks
  #   shell: vgcreate --physicalextentsize 128k {{ item }}
  #   with_items: bricks

  # - name: Gather pv details
  #   shell: pvs --noheading --units m -o pv_size {{ item }} | \
  #              sed 's/\(.*\)m/(\1 - 4\) * 10 \/ 10/' | bc > /tmp/pvsize
  #   with_items: bricks

  # - name: Read pvsize into a variable
  #   shell: cat /tmp/pvsize
  #   register: pvsize

  # - name: Calculate metadatasize for pvsize > 1000000
  #   # Doing this on purpose as I need metadatasize further down the script
  #   shell: echo "16 * 1024 * 1024" | bc > /tmp/mdatasize
  #   when: pvsize.stdout|int  > 1000000

  # - name: Calculate metadatasize for pvsize < 1000000
  #   shell: echo "(`</tmp/pvsize` / 200) * 1024" | bc >  /tmp/mdatasize
  #   when: pvsize.stdout|int  < 1000000

  # - name: Read metadatasize into a variable
  #   shell: cat  /tmp/mdatasize
  #   register: metadatasize

  # - name: Calculate the poolsize
  #   shell: echo "(`</tmp/pvsize` * 1024) - `</tmp/mdatasize`" | bc
  #   register: poolsize

  # # Create vg for the physical volumes

  # # Create lv and thinpool

  # - debug: msg="{{ pvsize.stdout }}"
  # - debug: msg="{{ metadatasize.stdout }}"
  # - debug: msg="{{ poolsize.stdout }}"
